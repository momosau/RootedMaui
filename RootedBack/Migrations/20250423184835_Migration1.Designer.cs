// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RootedBack.Data;

#nullable disable

namespace RootedBack.Migrations
{
    [DbContext(typeof(RootedDBContext))]
    [Migration("20250423184835_Migration1")]
    partial class Migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SharedLibraryy.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("AdminId");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("SharedLibraryy.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("int")
                        .HasColumnName("ConsumerID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartId")
                        .HasName("PK_CArt");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "ConsumerId" }, "IX_Cart_ConsumerID");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("SharedLibraryy.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagesUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("SharedLibraryy.Models.Consumer", b =>
                {
                    b.Property<int>("ConsumerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConsumerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsumerId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HouseNum")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserNamer")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ConsumerId");

                    b.ToTable("Consumer", (string)null);
                });

            modelBuilder.Entity("SharedLibraryy.Models.Farmer", b =>
                {
                    b.Property<int>("FarmerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FarmerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmerId"));

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FarmName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("FarmNum")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Street")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("VerificationStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("('Pending')");

                    b.HasKey("FarmerId");

                    b.ToTable("Farmer", (string)null);
                });

            modelBuilder.Entity("SharedLibraryy.Models.FarmerApplication", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ApplicationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    b.Property<string>("Certificate")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FarmName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("FarmNum")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly>("SubmitDate")
                        .HasColumnType("date");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("VerificationStatus")
                        .HasColumnType("bit");

                    b.HasKey("ApplicationId");

                    b.HasIndex("AdminId");

                    b.ToTable("FarmerApplication", (string)null);
                });

            modelBuilder.Entity("SharedLibraryy.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("int")
                        .HasColumnName("ConsumerID");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int")
                        .HasColumnName("FarmerID");

                    b.Property<string>("HouseNum")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "ConsumerId" }, "IX_Order_ConsumerID");

                    b.HasIndex(new[] { "FarmerId" }, "IX_Order_FarmerID");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("SharedLibraryy.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("PaymentId");

                    b.HasIndex(new[] { "OrderId" }, "IX_Payment_OrderID");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("SharedLibraryy.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int")
                        .HasColumnName("FarmerID");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex(new[] { "FarmerId" }, "IX_Product_FarmerID");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("SharedLibraryy.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int?>("ConsumerId")
                        .HasColumnType("int")
                        .HasColumnName("ConsumerID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("FarmerId")
                        .HasColumnType("int")
                        .HasColumnName("FarmerID");

                    b.Property<string>("Question1")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Question");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("int")
                        .HasColumnName("ConsumerID");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int")
                        .HasColumnName("FarmerID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("ReviewId");

                    b.HasIndex("FarmerId");

                    b.HasIndex(new[] { "ConsumerId" }, "IX_Review_ConsumerID");

                    b.HasIndex(new[] { "ProductId" }, "IX_Review_ProductID");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("SharedLibraryy.Models.Specification", b =>
                {
                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("SpecificationID");

                    b.Property<int?>("FarmerApplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("FarmerId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsGmofree")
                        .HasColumnType("bit")
                        .HasColumnName("IsGMOFree");

                    b.Property<bool?>("IsHydroponicallyGrown")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLocal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOrganic")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPesticideFree")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("SpecificationId");

                    b.HasIndex(new[] { "FarmerApplicationId" }, "IX_Applocation")
                        .IsUnique()
                        .HasFilter("[FarmerApplicationId] IS NOT NULL");

                    b.HasIndex(new[] { "FarmerId" }, "IX_Farmer")
                        .IsUnique()
                        .HasFilter("[FarmerId] IS NOT NULL");

                    b.HasIndex(new[] { "ProductId" }, "IX_Product")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("Specification", (string)null);
                });

            modelBuilder.Entity("SharedLibraryy.Models.Cart", b =>
                {
                    b.HasOne("SharedLibraryy.Models.Consumer", "Consumer")
                        .WithMany("Carts")
                        .HasForeignKey("ConsumerId")
                        .IsRequired()
                        .HasConstraintName("Consumer_cart");

                    b.HasOne("SharedLibraryy.Models.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_product");

                    b.Navigation("Consumer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SharedLibraryy.Models.FarmerApplication", b =>
                {
                    b.HasOne("SharedLibraryy.Models.Admin", "Admin")
                        .WithMany("FarmerApplications")
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminAplication");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Order", b =>
                {
                    b.HasOne("SharedLibraryy.Models.Consumer", "Consumer")
                        .WithMany("Orders")
                        .HasForeignKey("ConsumerId")
                        .IsRequired()
                        .HasConstraintName("Consumer_Order");

                    b.HasOne("SharedLibraryy.Models.Farmer", "Farmer")
                        .WithMany("Orders")
                        .HasForeignKey("FarmerId")
                        .IsRequired()
                        .HasConstraintName("Farmer_order");

                    b.HasOne("SharedLibraryy.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Product");

                    b.Navigation("Consumer");

                    b.Navigation("Farmer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Payment", b =>
                {
                    b.HasOne("SharedLibraryy.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("Order_Payment");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Product", b =>
                {
                    b.HasOne("SharedLibraryy.Models.Category", "CategoryNavigation")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryProduct");

                    b.HasOne("SharedLibraryy.Models.Farmer", "Farmer")
                        .WithMany("Products")
                        .HasForeignKey("FarmerId")
                        .IsRequired()
                        .HasConstraintName("Farmer_Prooduct");

                    b.Navigation("CategoryNavigation");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Review", b =>
                {
                    b.HasOne("SharedLibraryy.Models.Consumer", "Consumer")
                        .WithMany("Reviews")
                        .HasForeignKey("ConsumerId")
                        .IsRequired()
                        .HasConstraintName("Review_Consumer");

                    b.HasOne("SharedLibraryy.Models.Farmer", "Farmer")
                        .WithMany("Reviews")
                        .HasForeignKey("FarmerId")
                        .IsRequired()
                        .HasConstraintName("FK_FarmerReview");

                    b.HasOne("SharedLibraryy.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("Product_Review");

                    b.Navigation("Consumer");

                    b.Navigation("Farmer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Specification", b =>
                {
                    b.HasOne("SharedLibraryy.Models.FarmerApplication", "FarmerApplication")
                        .WithOne("Specification")
                        .HasForeignKey("SharedLibraryy.Models.Specification", "FarmerApplicationId")
                        .HasConstraintName("FK_Specification_FarmerAPpliaction");

                    b.HasOne("SharedLibraryy.Models.Farmer", "Farmer")
                        .WithOne("Specification")
                        .HasForeignKey("SharedLibraryy.Models.Specification", "FarmerId")
                        .HasConstraintName("FK_Specification_Farmer");

                    b.HasOne("SharedLibraryy.Models.Product", "Product")
                        .WithOne("Specification")
                        .HasForeignKey("SharedLibraryy.Models.Specification", "ProductId")
                        .HasConstraintName("FK_Specification_Product");

                    b.Navigation("Farmer");

                    b.Navigation("FarmerApplication");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Admin", b =>
                {
                    b.Navigation("FarmerApplications");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Consumer", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Farmer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("Reviews");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("SharedLibraryy.Models.FarmerApplication", b =>
                {
                    b.Navigation("Specification");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Order", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("Specification");
                });
#pragma warning restore 612, 618
        }
    }
}
