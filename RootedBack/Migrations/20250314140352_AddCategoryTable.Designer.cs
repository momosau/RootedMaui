// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RootedBack.Data;

#nullable disable

namespace RootedBack.Migrations
{
    [DbContext(typeof(RootedDBContext))]
    [Migration("20250314140352_AddCategoryTable")]
    partial class AddCategoryTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductSpecification", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("SpecificationID");

                    b.HasKey("ProductId", "SpecificationId")
                        .HasName("PK__ProductS__7E348A2CA8112B49");

                    b.HasIndex("SpecificationId");

                    b.ToTable("ProductSpecifications", (string)null);
                });

            modelBuilder.Entity("SharedLibraryy.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nchar(250)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("AdminId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("ConsumerId")
                        .HasColumnType("int")
                        .HasColumnName("ConsumerID");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("CartId")
                        .HasName("PK_CArt");

                    b.HasIndex("ConsumerId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Consumer", b =>
                {
                    b.Property<int>("ConsumerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConsumerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsumerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("UserNamer")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("ConsumerId");

                    b.ToTable("Consumer");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Farmer", b =>
                {
                    b.Property<int>("FarmerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FarmerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmerId"));

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("VerifiedByAdminId")
                        .HasColumnType("int");

                    b.HasKey("FarmerId");

                    b.HasIndex("VerifiedByAdminId");

                    b.ToTable("Farmer");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("int")
                        .HasColumnName("ConsumerID");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int")
                        .HasColumnName("FarmerID");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("OrderId");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("FarmerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int")
                        .HasColumnName("FarmerID");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.HasIndex("FarmerId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int>("ConsumerId")
                        .HasColumnType("int")
                        .HasColumnName("ConsumerID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("ReviewId");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Shipping", b =>
                {
                    b.Property<int>("ShippingId")
                        .HasColumnType("int")
                        .HasColumnName("ShippingID");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ShippingStatus")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("TrackingNumber")
                        .HasColumnType("int");

                    b.HasKey("ShippingId");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipping");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Specification", b =>
                {
                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("SpecificationID");

                    b.Property<bool?>("IsGmofree")
                        .HasColumnType("bit")
                        .HasColumnName("IsGMOFree");

                    b.Property<bool?>("IsHydroponicallyGrown")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLocal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOrganic")
                        .HasColumnType("bit");

                    b.HasKey("SpecificationId");

                    b.ToTable("Specification");
                });

            modelBuilder.Entity("ProductSpecification", b =>
                {
                    b.HasOne("SharedLibraryy.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("Product_Specification");

                    b.HasOne("SharedLibraryy.Models.Specification", null)
                        .WithMany()
                        .HasForeignKey("SpecificationId")
                        .IsRequired()
                        .HasConstraintName("Sepcification_Product");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Cart", b =>
                {
                    b.HasOne("SharedLibraryy.Models.Consumer", "Consumer")
                        .WithMany("Carts")
                        .HasForeignKey("ConsumerId")
                        .IsRequired()
                        .HasConstraintName("Consumer_cart");

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Farmer", b =>
                {
                    b.HasOne("SharedLibraryy.Models.Admin", "VerifiedByAdmin")
                        .WithMany("Farmers")
                        .HasForeignKey("VerifiedByAdminId")
                        .IsRequired()
                        .HasConstraintName("FK_Farmer_Admin");

                    b.Navigation("VerifiedByAdmin");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Order", b =>
                {
                    b.HasOne("SharedLibraryy.Models.Consumer", "Consumer")
                        .WithMany("Orders")
                        .HasForeignKey("ConsumerId")
                        .IsRequired()
                        .HasConstraintName("Consumer_Order");

                    b.HasOne("SharedLibraryy.Models.Farmer", "Farmer")
                        .WithMany("Orders")
                        .HasForeignKey("FarmerId")
                        .IsRequired()
                        .HasConstraintName("Farmer_order");

                    b.Navigation("Consumer");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Payment", b =>
                {
                    b.HasOne("SharedLibraryy.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("Order_Payment");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Product", b =>
                {
                    b.HasOne("SharedLibraryy.Models.Farmer", "Farmer")
                        .WithMany("Products")
                        .HasForeignKey("FarmerId")
                        .IsRequired()
                        .HasConstraintName("Farmer_Prooduct");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Review", b =>
                {
                    b.HasOne("SharedLibraryy.Models.Consumer", "Consumer")
                        .WithMany("Reviews")
                        .HasForeignKey("ConsumerId")
                        .IsRequired()
                        .HasConstraintName("Review_Consumer");

                    b.HasOne("SharedLibraryy.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("Product_Review");

                    b.Navigation("Consumer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Shipping", b =>
                {
                    b.HasOne("SharedLibraryy.Models.Order", "Order")
                        .WithMany("Shippings")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("Order_Shipping");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Admin", b =>
                {
                    b.Navigation("Farmers");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Consumer", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Farmer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Order", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Shippings");
                });

            modelBuilder.Entity("SharedLibraryy.Models.Product", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
